<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.surrealroad.alfred-reminder</string>
	<key>category</key>
	<string>Productivity</string>
	<key>connections</key>
	<dict>
		<key>140C34D0-49CC-4CE2-BA3E-02B3B115F9D8</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>9C5CBE5A-08CB-4CEB-BCAE-4C1004408F30</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>E5B72F9E-C243-4876-B6BB-4C79008E62D0</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>DF47C07B-3990-4258-9ADD-9750C97514B2</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>7C61BE1C-BE82-42B1-A275-DDECED8286B9</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>4F5104FF-C724-4808-A868-A22160D0D9E7</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>EDFDD779-8983-498D-A72A-AF66A1753F7C</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>B3DC4BDA-18AF-4BC9-B6FD-5AC43239F9A0</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>753A2FE9-54A7-4669-A152-62DD67EDCC50</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>B3DC4BDA-18AF-4BC9-B6FD-5AC43239F9A0</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>9B74DEE8-5782-4018-AEED-4292720A1DD2</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>140C34D0-49CC-4CE2-BA3E-02B3B115F9D8</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>8AD0B8E1-2FF7-48C0-AF64-5BF7C0D23024</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>9C5CBE5A-08CB-4CEB-BCAE-4C1004408F30</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>9E75FCF7-24AE-46AC-869F-BA9DC4B00A00</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>A7051A8F-F219-487F-93B5-7FB38425A3F8</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>EDFDD779-8983-498D-A72A-AF66A1753F7C</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>B3DC4BDA-18AF-4BC9-B6FD-5AC43239F9A0</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>9B74DEE8-5782-4018-AEED-4292720A1DD2</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>EDFDD779-8983-498D-A72A-AF66A1753F7C</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>9B74DEE8-5782-4018-AEED-4292720A1DD2</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Jack James</string>
	<key>description</key>
	<string>Manages reminders in Apple Reminders</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>Reminders for Alfred</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>applescript</key>
				<string>on alfred_script(q)
  tell application "Reminders" to quit
end alfred_script</string>
				<key>cachescript</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.applescript</string>
			<key>uid</key>
			<string>9E75FCF7-24AE-46AC-869F-BA9DC4B00A00</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>availableviaurlhandler</key>
				<false/>
				<key>triggerid</key>
				<string>remind</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.trigger.external</string>
			<key>uid</key>
			<string>A7051A8F-F219-487F-93B5-7FB38425A3F8</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>68</integer>
				<key>script</key>
				<string>ObjC.import('Foundation');
ObjC.import('stdlib');
const window = {}; // required for chrono.js to function properly, see https://github.com/wanasit/chrono/issues/34

function run(argv) {
  const query = argv[0];
  let results = {};
  const jsonResult = {};
  const shouldQuit = !isRemindersRunning();

  if (query == 'help') {
    results = showHelpItems();
  } else {
    results = parseReminderQuery(query);
  }

  jsonResult.items = results.items;
  jsonResult.variables = {
    reminders: JSON.stringify(results.reminders),
    quitAfter: JSON.stringify(shouldQuit),
  };
  return JSON.stringify(jsonResult);
}

function isRemindersRunning() {
  return Application('Reminders').running();
}

// returns a dictionary corresponding to an Alfred action item
// https://www.alfredapp.com/help/workflows/inputs/script-filter/json/
// arg: Alfred item arg
// valid: true|false whether to enable action
// reminderText: text of the reminder
// date: remind me date
// whenText: text corresponding to the remind me date
// priority: 1|2|3 reminder priority value
//
function getAction(options) {
  const Reminders = Application('Reminders');
  const arg = options.arg;
  let valid = options.valid;
  let icon = '';
  let title = 'Add Reminder';
  let subtitle = 'Create a new reminder';

  if (options.reminderText) subtitle += ` to "${options.reminderText}"`;
  else if (options.application &amp;&amp; options.application.text) subtitle += ` about "${options.application.text}"`;

  if (options.date) {
    subtitle += ` on ${options.date.toString()}`;
  }

  if (options.whenText) {
    title = `Remind me ${options.whenText}`;
  }

  if (options.application) {
    const appname = options.application.appname;
    icon = options.application.icon;
    title += ` from ${appname}`;
  }

  if (options.priority) {
    if ($.getenv('reverse_priority') == 1) {
      switch (parseInt(options.priority)) {
        case 0:
          break;
        case 3:
          title += ' (low priority)';
          subtitle += ' (low priority)';
          break;
        case 2:
          title += ' (medium priority)';
          subtitle += ' (medium priority)';
          break;
        case 1:
          title += ' (high priority)';
          subtitle += ' (high priority)';
          break;
        default:
          break;
      }
    } else {
      switch (parseInt(options.priority)) {
        case 0:
          break;
        case 1:
          title += ' (low priority)';
          subtitle += ' (low priority)';
          break;
        case 2:
          title += ' (medium priority)';
          subtitle += ' (medium priority)';
          break;
        case 3:
          title += ' (high priority)';
          subtitle += ' (high priority)';
          break;
        default:
          break;
      }
    }
  }

  if (options.reminderList) {
    // verify a matching list exists
    lists = Reminders.lists.whose({ name: options.reminderList });
    if (lists.length) {
      subtitle += ` in the ${lists[0].name()} list`;
    } else {
      valid = false;
      title = 'Cannot create reminder';
      subtitle = `No list called "${options.reminderList}" was found in Reminders`;
      // TODO: maybe add a different icon here
    }
  }

  const item = {
    title, arg, valid, subtitle, icon: { path: icon },
  };
  return item;
}

// returns a dictionary containing data to make a reminder
// arg: Alfred item arg
// reminderText: text of the reminder
// reminderBody: body text for the reminder
// date: remind me date
// list: reminder list name
// priority: 1|2|3 reminder priority value
// application: application name
//
function getReminderData(options) {
  const arg = options.arg;
  let text = options.reminderText;
  const priority = options.priority;
  let body = '';
  let date = '';
  let application = '';
  let list = '';

  if (options.reminderBody) {
    body = options.reminderBody;
  }

  if (options.date) {
    date = options.date;
  }

  if (options.application) {
    application = options.application.appname;
    if (!text) text = options.application.text;
    if (!body) body = options.application.body;
  }

  if (options.reminderList) {
    list = options.reminderList;
  }

  const data = {
    arg, text, body, date, list, priority: parseInt(priority), application,
  };
  return data;
}

function parseReminderQuery(query) {
  const originalQuery = query;
  const parsedReminder = {};
  const items = [];
  const reminders = [];

  // list supported applications along with the associated JXA to fetch information
  const supportedReminderApplications = [
    {
      appname: 'Address Book', icon: 'Address Book.png', reminderText: 'Application("Contacts").selection()[0].name()', reminderBody: '"addressbook://" + Application("Contacts").selection()[0].id()',
    },
    {
      appname: 'AdobeAcrobat', icon: 'AcrobatPro.png', reminderText: 'Application("Adobe Acrobat").activeDoc.name()', reminderBody: 'var p = Application("Adobe Acrobat").activeDoc.fileAlias().toString(); if(p) "file://" + escape(p)',
    },
    {
      appname: 'Chromium', icon: 'Chromium.png', reminderText: 'Application("Chromium").windows[0].activeTab.title();', reminderBody: 'Application("Chromium").windows[0].activeTab.url();',
    },
    {
      appname: 'Contacts', icon: 'Address Book.png', reminderText: 'Application("Contacts").selection()[0].name()', reminderBody: '"addressbook://" + Application("Contacts").selection()[0].id()',
    },
    {
      appname: 'Finder', icon: 'Finder.png', reminderText: 'Application("Finder").selection()[0].name()', reminderBody: 'Application("Finder").selection()[0].url()',
    },
    {
      appname: 'FoldingText', icon: 'App.png', reminderText: 'Application("FoldingText").documents[0].name()', reminderBody: 'var p = Application("FoldingText").documents[0].path(); if(p) "file://" + escape(p)',
    },
    {
      appname: 'Brave Browser', icon: 'Brave.png', reminderText: 'Application("Brave Browser").windows[0].activeTab.title();', reminderBody: 'Application("Brave Browser").windows[0].activeTab.url();',
    },
    {
      appname: 'Microsoft Edge', icon: 'Edge.png', reminderText: 'Application("Microsoft Edge").windows[0].activeTab.title();', reminderBody: 'Application("Microsoft Edge").windows[0].activeTab.url();',
    },
    {
      appname: 'Google Chrome', icon: 'Chrome.png', reminderText: 'Application("Google Chrome").windows[0].activeTab.title();', reminderBody: 'Application("Google Chrome").windows[0].activeTab.url();',
    },
    {
      appname: 'Google Chrome Canary', icon: 'Chrome Canary.png', reminderText: 'Application("Google Chrome Canary").windows[0].activeTab.title();', reminderBody: 'Application("Google Chrome Canary").windows[0].activeTab.url();',
    },
    {
      appname: 'Mailplane', icon: 'Mailplane.png', reminderText: 'Application("Mailplane").currenttitle()', reminderBody: 'Application("MailPlane").currentmessagetext()',
    },
    {
      appname: 'Mail', icon: 'Mail.png', reminderText: 'var m = Application("Mail").selection()[Application("Mail").selection().length-1]; m.subject() + " (From " + m.sender() + ")"', reminderBody: 'var m = Application("Mail").selection()[Application("Mail").selection().length-1]; "message://&lt;" + m.messageId() + "&gt;"',
    },
    {
      appname: 'Microsoft PowerPoint', icon: 'Powerpoint.png', reminderText: 'Application("Microsoft PowerPoint").activePresentation.name()', reminderBody: 'var p = Application("Microsoft PowerPoint").activePresentation.fullName(); if(p) "file://" + escape(p)',
    },
    {
      appname: 'Microsoft Word', icon: 'MSWord.png', reminderText: 'Application("Microsoft Word").activeDocument.name()', reminderBody: 'var p = Application("Microsoft Word").activeDocument.posixFullName(); if(p) "file://" + escape(p)',
    },
    {
      appname: 'Safari', icon: 'Safari.png', reminderText: 'Application("Safari").windows[0].currentTab.name();', reminderBody: 'Application("Safari").windows[0].currentTab.url();',
    },
    {
      appname: 'TextEdit', icon: 'TextEdit.png', reminderText: 'Application("TextEdit").documents[0].name()', reminderBody: 'var p = Application("TextEdit").documents[0].path(); if(p) "file://" + escape(p)',
    },
    {
      appname: 'TextMate', icon: 'TextMate.png', reminderText: 'Application("TextMate").documents[0].name()', reminderBody: 'var p = Application("TextMate").documents[0].path(); if(p) "file://" + escape(p)',
    },
    {
      appname: 'Vienna', icon: 'RSS.png', reminderText: 'Application("Vienna").currentArticle().title()', reminderBody: 'Application("Vienna").currentArticle().link()',
    },
    {
      appname: 'WebKit', icon: 'Safari.png', reminderText: 'Application("WebKit").windows[0].currentTab.name();', reminderBody: 'Application("WebKit").windows[0].currentTab.url();',
    },
    {
      appname: 'Spark', icon: 'Spark.png', reminderText: 'Application("Spark").getselectedmessagetitle();', reminderBody: 'Application("Spark").getselectedmessagebacklink();',
    },
  ];
  if (!window.chrono) {
    // https://github.com/dtinth/JXA-Cookbook/wiki/Importing-Scripts

    // http://www.alfredforum.com/topic/9070-how-to-workflowenvironment-variables/
    // https://www.alfredapp.com/help/workflows/script-environment-variables/
    const chronoPath = `${$.getenv('alfred_preferences')}/workflows/${$.getenv('alfred_workflow_uid')}/chrono.min.js`;

    // uncomment for local testing in script editor
    // var path = app.pathTo(this);
    // var workflowFolder =  $.NSString.alloc.initWithUTF8String(path).stringByDeletingLastPathComponent.js + '/';
    // var chronoPath = workflowFolder + "chrono.min.js"

    console.log(chronoPath);

    const fm = $.NSFileManager.defaultManager;
    let contents = fm.contentsAtPath(chronoPath); // NSData
    contents = $.NSString.alloc.initWithDataEncoding(contents, $.NSUTF8StringEncoding);

    eval(ObjC.unwrap(contents));
  }

  // extract list
  let reminderList = '';
  // http://regexr.com/3f03r
  // var listRegex = /(.+) in (.+) list$/i
  // var matches = listRegex.exec(query)
  // if(matches &amp;&amp; matches.length == 3) {
  // 	reminderList = matches[2];
  // 	query = matches[1];
  // }
  let listRegex = /(.+) in (.+) list($|\s+)/i;
  var matches = listRegex.exec(query);
  if (matches &amp;&amp; matches.length == 4) {
    reminderList = matches[2];
    query = matches[1];
  }
  if (reminderList == '') {
    listRegex = /(.+) @ (.+?)($|\s+)/i;
    matches = listRegex.exec(query);
    if (matches &amp;&amp; matches.length == 4) {
      reminderList = matches[2];
      query = matches[1];
    }
  }

  // extract priority
  let priority = '';
  // test for !, !!, !!! at beginning
  // http://regexr.com/3er7r
  var priorityRegex = /^(!{1,3})\s(.+)/i;
  var matches = priorityRegex.exec(query);
  if (matches &amp;&amp; matches.length == 3) {
    priority = matches[1].length;
    query = matches[2];
  } else {
    // test for !, !!, !!! at end
    // http://regexr.com/3er7u
    var priorityRegex = /\s(.+)\s(!{1,3})$/i;
    var matches = priorityRegex.exec(query);
    if (matches &amp;&amp; matches.length == 3) {
      priority = matches[2].length;
      query = matches[1];
    } else {
      // test for !3, p1, priority 1, etc
      // http://regexr.com/3er73
      var priorityRegex = /(.+)\s(priority|p|!)\s*([1-3])\s*$/i;
      var matches = priorityRegex.exec(query);
      if (matches &amp;&amp; matches.length == 4) {
        priority = matches[3];
        query = matches[1];
      } else {
        // test for !hi, p med, priority low, etc
        // http://regexr.com/3er7c
        var priorityRegex = /(.+)\s(priority\s+|p\s*|!\s*)(l|lo|low|m|med|medium|h|hi|high)\s*$/i;
        var matches = priorityRegex.exec(query);
        if (matches &amp;&amp; matches.length == 4) {
          priorityText = matches[3];
          if (priorityText[0] == 'l') priority = 1;
          else if (priorityText[0] == 'm') priority = 2;
          else if (priorityText[0] == 'h') priority = 3;
          query = matches[1];
        } else {
          // test for hi!, med p, low priority, etc
          // http://regexr.com/3er7i
          var priorityRegex = /(.+)\s(l|lo|low|m|med|medium|h|hi|high)(\s+priority|\s*p|\s*!)\s*$/i;
          var matches = priorityRegex.exec(query);
          if (matches &amp;&amp; matches.length == 4) {
            priorityText = matches[2];
            if (priorityText[0] == 'l') priority = 1;
            else if (priorityText[0] == 'm') priority = 2;
            else if (priorityText[0] == 'h') priority = 3;
            query = matches[1];
          }
        }
      }
    }
  }

  if (priority != '') {
    if ($.getenv('reverse_priority') == 1) {
      priority = [0, 9, 5, 1][priority];
    } else {
      priority = [0, 1, 5, 9][priority];
    }
  }

  // extract application
  let application = '';
  const reminderBody = '';
  // test for "this" keyword
  // http://regexr.com/3er84
  const thisRegex = /^this$|^this\s(.*)/i;
  var matches = thisRegex.exec(query);
  if (matches &amp;&amp; matches.length == 2) {
    query = matches[1];
    const app = Application('System Events').applicationProcesses.where({
      frontmost: true,
    })[0];
    const currentApplication = app.properties().name;
    console.log(currentApplication);
    application = supportedReminderApplications.find((a) =&gt; a.appname == currentApplication);

    if (!application) {
      // terminate with an unactionable message that current application is not supported
      const item = {
        title: 'Add Reminder', arg: -1, valid: false, subtitle: `${currentApplication} is not supported by this workflow at this time`, icon: { path: 'Instruments.png' },
      };
      return { items: [item] };
    }

    // get application-specific data
    application.text = eval(application.reminderText);
    console.log(application.text);
    application.body = eval(application.reminderBody);
    console.log(application.body);
  }

  results = window.chrono.parse(query);
  const now = new Date();

  for (let i = 0; i &lt; results.length; i++) {
    resultText = query.replace(results[i].text, '');
    const d = results[i].start.date(); // Create a Date object
    // If date is in the past, assume intended date is tomorrow
    if (d &lt; now) {
      d.setDate(now.getDate() + 1);
    }
    const reminderText = resultText.trim();
    items.push(getAction({
      arg: i, valid: true, reminderText, date: d, whenText: results[i].text, priority, reminderList,
    }));
    reminders.push(getReminderData({
      arg: i, reminderText, reminderBody, date: d, list: '', priority, application, reminderList,
    }));
  }

  // always submit non-dated item
  items.push(getAction({
    arg: -1, valid: true, reminderText: query, priority, application, reminderList,
  }));
  reminders.push(getReminderData({
    arg: -1, reminderText: query, reminderBody: '', date: '', list: '', priority, application, reminderList,
  }));

  parsedReminder.items = items;
  parsedReminder.reminders = reminders;

  return parsedReminder;
}

function showHelpItems() {
  const helpItems = [
    'do something crazy',
    'today release the hamsters into the wild',
    'tomorrow bring about financial ruin upon my enemies',
    'in 5 minutes drop everything',
    'in 2 hours laugh out loud in Reminders list',
    'in 3 days 1 hour pick stuff up off the floor',
    '24/12/13 to forget everything I know about things in movies',
    '12 June 15 to come up with some interesting ideas',
    '31-12-99 23:22 panic about the millennium bug',
    'at 2pm wait for nothing in particular',
    'next thursday at 15.30 ask some difficult questions',
    '!!! in 2 weeks an important meeting',
    'thursday have a banana medium priority',
    'decide what to have for lunch !lo',
    'make a turkey sandwich p3',
    'this',
  ];
  var parsedReminder = {};
  const items = [];
  const reminders = [];

  for (let i = 0; i &lt; helpItems.length; i++) {
    var parsedReminder = parseReminderQuery(helpItems[i]);
    // console.log(helpItems[i]);
    if (parsedReminder.items) {
      item = parsedReminder.items[0];
      item.title = `r ${helpItems[i]}`;
      item.valid = false;
      items.push(item);
    }
    if (parsedReminder.reminders) {
      reminders.push(parsedReminder.reminders[0]);
    }
  }

  parsedReminder.items = items;
  parsedReminder.reminders = reminders;

  return parsedReminder;
}</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>7</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>EDFDD779-8983-498D-A72A-AF66A1753F7C</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>inputstring</key>
				<string>{var:quitAfter}</string>
				<key>matchcasesensitive</key>
				<true/>
				<key>matchmode</key>
				<integer>0</integer>
				<key>matchstring</key>
				<string>true</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.filter</string>
			<key>uid</key>
			<string>9C5CBE5A-08CB-4CEB-BCAE-4C1004408F30</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argument</key>
				<string>{query}</string>
				<key>passthroughargument</key>
				<false/>
				<key>variables</key>
				<dict>
					<key>defaultList</key>
					<string></string>
				</dict>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.argument</string>
			<key>uid</key>
			<string>9B74DEE8-5782-4018-AEED-4292720A1DD2</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<false/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>0</integer>
				<key>escaping</key>
				<integer>68</integer>
				<key>keyword</key>
				<string>r</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>2</integer>
				<key>runningsubtext</key>
				<string>Processing…</string>
				<key>script</key>
				<string>ObjC.import('Foundation');
ObjC.import('stdlib');
const window = {}; // required for chrono.js to function properly, see https://github.com/wanasit/chrono/issues/34

function run(argv) {
  const query = argv[0];
  let results = {};
  const jsonResult = {};
  const shouldQuit = !isRemindersRunning();

  if (query == 'help') {
    results = showHelpItems();
  } else {
    results = parseReminderQuery(query);
  }

  jsonResult.items = results.items;
  jsonResult.variables = {
    reminders: JSON.stringify(results.reminders),
    quitAfter: JSON.stringify(shouldQuit),
  };
  return JSON.stringify(jsonResult);
}

function isRemindersRunning() {
  return Application('Reminders').running();
}

// returns a dictionary corresponding to an Alfred action item
// https://www.alfredapp.com/help/workflows/inputs/script-filter/json/
// arg: Alfred item arg
// valid: true|false whether to enable action
// reminderText: text of the reminder
// date: remind me date
// whenText: text corresponding to the remind me date
// priority: 1|2|3 reminder priority value
//
function getAction(options) {
  const Reminders = Application('Reminders');
  const arg = options.arg;
  let valid = options.valid;
  let icon = '';
  let title = 'Add Reminder';
  let subtitle = 'Create a new reminder';

  if (options.reminderText) subtitle += ` to "${options.reminderText}"`;
  else if (options.application &amp;&amp; options.application.text) subtitle += ` about "${options.application.text}"`;

  if (options.date) {
    subtitle += ` on ${options.date.toString()}`;
  }

  if (options.whenText) {
    title = `Remind me ${options.whenText}`;
  }

  if (options.application) {
    const appname = options.application.appname;
    icon = options.application.icon;
    title += ` from ${appname}`;
  }

  if (options.priority) {
    if ($.getenv('reverse_priority') == 1) {
      switch (parseInt(options.priority)) {
        case 0:
          break;
        case 3:
          title += ' (low priority)';
          subtitle += ' (low priority)';
          break;
        case 2:
          title += ' (medium priority)';
          subtitle += ' (medium priority)';
          break;
        case 1:
          title += ' (high priority)';
          subtitle += ' (high priority)';
          break;
        default:
          break;
      }
    } else {
      switch (parseInt(options.priority)) {
        case 0:
          break;
        case 1:
          title += ' (low priority)';
          subtitle += ' (low priority)';
          break;
        case 2:
          title += ' (medium priority)';
          subtitle += ' (medium priority)';
          break;
        case 3:
          title += ' (high priority)';
          subtitle += ' (high priority)';
          break;
        default:
          break;
      }
    }
  }

  if (options.reminderList) {
    // verify a matching list exists
    lists = Reminders.lists.whose({ name: options.reminderList });
    if (lists.length) {
      subtitle += ` in the ${lists[0].name()} list`;
    } else {
      valid = false;
      title = 'Cannot create reminder';
      subtitle = `No list called "${options.reminderList}" was found in Reminders`;
      // TODO: maybe add a different icon here
    }
  }

  const item = {
    title, arg, valid, subtitle, icon: { path: icon },
  };
  return item;
}

// returns a dictionary containing data to make a reminder
// arg: Alfred item arg
// reminderText: text of the reminder
// reminderBody: body text for the reminder
// date: remind me date
// list: reminder list name
// priority: 1|2|3 reminder priority value
// application: application name
//
function getReminderData(options) {
  const arg = options.arg;
  let text = options.reminderText;
  const priority = options.priority;
  let body = '';
  let date = '';
  let application = '';
  let list = '';

  if (options.reminderBody) {
    body = options.reminderBody;
  }

  if (options.date) {
    date = options.date;
  }

  if (options.application) {
    application = options.application.appname;
    if (!text) text = options.application.text;
    if (!body) body = options.application.body;
  }

  if (options.reminderList) {
    list = options.reminderList;
  }

  const data = {
    arg, text, body, date, list, priority: parseInt(priority), application,
  };
  return data;
}

function parseReminderQuery(query) {
  const originalQuery = query;
  const parsedReminder = {};
  const items = [];
  const reminders = [];

  // list supported applications along with the associated JXA to fetch information
  const supportedReminderApplications = [
    {
      appname: 'Address Book', icon: 'Address Book.png', reminderText: 'Application("Contacts").selection()[0].name()', reminderBody: '"addressbook://" + Application("Contacts").selection()[0].id()',
    },
    {
      appname: 'AdobeAcrobat', icon: 'AcrobatPro.png', reminderText: 'Application("Adobe Acrobat").activeDoc.name()', reminderBody: 'var p = Application("Adobe Acrobat").activeDoc.fileAlias().toString(); if(p) "file://" + escape(p)',
    },
    {
      appname: 'Chromium', icon: 'Chromium.png', reminderText: 'Application("Chromium").windows[0].activeTab.title();', reminderBody: 'Application("Chromium").windows[0].activeTab.url();',
    },
    {
      appname: 'Contacts', icon: 'Address Book.png', reminderText: 'Application("Contacts").selection()[0].name()', reminderBody: '"addressbook://" + Application("Contacts").selection()[0].id()',
    },
    {
      appname: 'Finder', icon: 'Finder.png', reminderText: 'Application("Finder").selection()[0].name()', reminderBody: 'Application("Finder").selection()[0].url()',
    },
    {
      appname: 'FoldingText', icon: 'App.png', reminderText: 'Application("FoldingText").documents[0].name()', reminderBody: 'var p = Application("FoldingText").documents[0].path(); if(p) "file://" + escape(p)',
    },
    {
      appname: 'Brave Browser', icon: 'Brave.png', reminderText: 'Application("Brave Browser").windows[0].activeTab.title();', reminderBody: 'Application("Brave Browser").windows[0].activeTab.url();',
    },
    {
      appname: 'Microsoft Edge', icon: 'Edge.png', reminderText: 'Application("Microsoft Edge").windows[0].activeTab.title();', reminderBody: 'Application("Microsoft Edge").windows[0].activeTab.url();',
    },
    {
      appname: 'Google Chrome', icon: 'Chrome.png', reminderText: 'Application("Google Chrome").windows[0].activeTab.title();', reminderBody: 'Application("Google Chrome").windows[0].activeTab.url();',
    },
    {
      appname: 'Google Chrome Canary', icon: 'Chrome Canary.png', reminderText: 'Application("Google Chrome Canary").windows[0].activeTab.title();', reminderBody: 'Application("Google Chrome Canary").windows[0].activeTab.url();',
    },
    {
      appname: 'Mailplane', icon: 'Mailplane.png', reminderText: 'Application("Mailplane").currenttitle()', reminderBody: 'Application("MailPlane").currentmessagetext()',
    },
    {
      appname: 'Mail', icon: 'Mail.png', reminderText: 'var m = Application("Mail").selection()[Application("Mail").selection().length-1]; m.subject() + " (From " + m.sender() + ")"', reminderBody: 'var m = Application("Mail").selection()[Application("Mail").selection().length-1]; "message://&lt;" + m.messageId() + "&gt;"',
    },
    {
      appname: 'Microsoft PowerPoint', icon: 'Powerpoint.png', reminderText: 'Application("Microsoft PowerPoint").activePresentation.name()', reminderBody: 'var p = Application("Microsoft PowerPoint").activePresentation.fullName(); if(p) "file://" + escape(p)',
    },
    {
      appname: 'Microsoft Word', icon: 'MSWord.png', reminderText: 'Application("Microsoft Word").activeDocument.name()', reminderBody: 'var p = Application("Microsoft Word").activeDocument.posixFullName(); if(p) "file://" + escape(p)',
    },
    {
      appname: 'Safari', icon: 'Safari.png', reminderText: 'Application("Safari").windows[0].currentTab.name();', reminderBody: 'Application("Safari").windows[0].currentTab.url();',
    },
    {
      appname: 'TextEdit', icon: 'TextEdit.png', reminderText: 'Application("TextEdit").documents[0].name()', reminderBody: 'var p = Application("TextEdit").documents[0].path(); if(p) "file://" + escape(p)',
    },
    {
      appname: 'TextMate', icon: 'TextMate.png', reminderText: 'Application("TextMate").documents[0].name()', reminderBody: 'var p = Application("TextMate").documents[0].path(); if(p) "file://" + escape(p)',
    },
    {
      appname: 'Vienna', icon: 'RSS.png', reminderText: 'Application("Vienna").currentArticle().title()', reminderBody: 'Application("Vienna").currentArticle().link()',
    },
    {
      appname: 'WebKit', icon: 'Safari.png', reminderText: 'Application("WebKit").windows[0].currentTab.name();', reminderBody: 'Application("WebKit").windows[0].currentTab.url();',
    },
    {
      appname: 'Spark', icon: 'Spark.png', reminderText: 'Application("Spark").getselectedmessagetitle();', reminderBody: 'Application("Spark").getselectedmessagebacklink();',
    },
  ];
  if (!window.chrono) {
    // https://github.com/dtinth/JXA-Cookbook/wiki/Importing-Scripts

    // http://www.alfredforum.com/topic/9070-how-to-workflowenvironment-variables/
    // https://www.alfredapp.com/help/workflows/script-environment-variables/
    const chronoPath = `${$.getenv('alfred_preferences')}/workflows/${$.getenv('alfred_workflow_uid')}/chrono.min.js`;

    // uncomment for local testing in script editor
    // var path = app.pathTo(this);
    // var workflowFolder =  $.NSString.alloc.initWithUTF8String(path).stringByDeletingLastPathComponent.js + '/';
    // var chronoPath = workflowFolder + "chrono.min.js"

    console.log(chronoPath);

    const fm = $.NSFileManager.defaultManager;
    let contents = fm.contentsAtPath(chronoPath); // NSData
    contents = $.NSString.alloc.initWithDataEncoding(contents, $.NSUTF8StringEncoding);

    eval(ObjC.unwrap(contents));
  }

  // extract list
  let reminderList = '';
  // http://regexr.com/3f03r
  // var listRegex = /(.+) in (.+) list$/i
  // var matches = listRegex.exec(query)
  // if(matches &amp;&amp; matches.length == 3) {
  // 	reminderList = matches[2];
  // 	query = matches[1];
  // }
  let listRegex = /(.+) in (.+) list($|\s+)/i;
  var matches = listRegex.exec(query);
  if (matches &amp;&amp; matches.length == 4) {
    reminderList = matches[2];
    query = matches[1];
  }
  if (reminderList == '') {
    listRegex = /(.+) @ (.+?)($|\s+)/i;
    matches = listRegex.exec(query);
    if (matches &amp;&amp; matches.length == 4) {
      reminderList = matches[2];
      query = matches[1];
    }
  }

  // extract priority
  let priority = '';
  // test for !, !!, !!! at beginning
  // http://regexr.com/3er7r
  var priorityRegex = /^(!{1,3})\s(.+)/i;
  var matches = priorityRegex.exec(query);
  if (matches &amp;&amp; matches.length == 3) {
    priority = matches[1].length;
    query = matches[2];
  } else {
    // test for !, !!, !!! at end
    // http://regexr.com/3er7u
    var priorityRegex = /\s(.+)\s(!{1,3})$/i;
    var matches = priorityRegex.exec(query);
    if (matches &amp;&amp; matches.length == 3) {
      priority = matches[2].length;
      query = matches[1];
    } else {
      // test for !3, p1, priority 1, etc
      // http://regexr.com/3er73
      var priorityRegex = /(.+)\s(priority|p|!)\s*([1-3])\s*$/i;
      var matches = priorityRegex.exec(query);
      if (matches &amp;&amp; matches.length == 4) {
        priority = matches[3];
        query = matches[1];
      } else {
        // test for !hi, p med, priority low, etc
        // http://regexr.com/3er7c
        var priorityRegex = /(.+)\s(priority\s+|p\s*|!\s*)(l|lo|low|m|med|medium|h|hi|high)\s*$/i;
        var matches = priorityRegex.exec(query);
        if (matches &amp;&amp; matches.length == 4) {
          priorityText = matches[3];
          if (priorityText[0] == 'l') priority = 1;
          else if (priorityText[0] == 'm') priority = 2;
          else if (priorityText[0] == 'h') priority = 3;
          query = matches[1];
        } else {
          // test for hi!, med p, low priority, etc
          // http://regexr.com/3er7i
          var priorityRegex = /(.+)\s(l|lo|low|m|med|medium|h|hi|high)(\s+priority|\s*p|\s*!)\s*$/i;
          var matches = priorityRegex.exec(query);
          if (matches &amp;&amp; matches.length == 4) {
            priorityText = matches[2];
            if (priorityText[0] == 'l') priority = 1;
            else if (priorityText[0] == 'm') priority = 2;
            else if (priorityText[0] == 'h') priority = 3;
            query = matches[1];
          }
        }
      }
    }
  }

  if (priority != '') {
    if ($.getenv('reverse_priority') == 1) {
      priority = [0, 9, 5, 1][priority];
    } else {
      priority = [0, 1, 5, 9][priority];
    }
  }

  // extract application
  let application = '';
  const reminderBody = '';
  // test for "this" keyword
  // http://regexr.com/3er84
  const thisRegex = /^this$|^this\s(.*)/i;
  var matches = thisRegex.exec(query);
  if (matches &amp;&amp; matches.length == 2) {
    query = matches[1];
    const app = Application('System Events').applicationProcesses.where({
      frontmost: true,
    })[0];
    const currentApplication = app.properties().name;
    console.log(currentApplication);
    application = supportedReminderApplications.find((a) =&gt; a.appname == currentApplication);

    if (!application) {
      // terminate with an unactionable message that current application is not supported
      const item = {
        title: 'Add Reminder', arg: -1, valid: false, subtitle: `${currentApplication} is not supported by this workflow at this time`, icon: { path: 'Instruments.png' },
      };
      return { items: [item] };
    }

    // get application-specific data
    application.text = eval(application.reminderText);
    console.log(application.text);
    application.body = eval(application.reminderBody);
    console.log(application.body);
  }

  results = window.chrono.parse(query);
  const now = new Date();

  for (let i = 0; i &lt; results.length; i++) {
    resultText = query.replace(results[i].text, '');
    const d = results[i].start.date(); // Create a Date object
    // If date is in the past, assume intended date is tomorrow
    if (d &lt; now) {
      d.setDate(now.getDate() + 1);
    }
    const reminderText = resultText.trim();
    items.push(getAction({
      arg: i, valid: true, reminderText, date: d, whenText: results[i].text, priority, reminderList,
    }));
    reminders.push(getReminderData({
      arg: i, reminderText, reminderBody, date: d, list: '', priority, application, reminderList,
    }));
  }

  // always submit non-dated item
  items.push(getAction({
    arg: -1, valid: true, reminderText: query, priority, application, reminderList,
  }));
  reminders.push(getReminderData({
    arg: -1, reminderText: query, reminderBody: '', date: '', list: '', priority, application, reminderList,
  }));

  parsedReminder.items = items;
  parsedReminder.reminders = reminders;

  return parsedReminder;
}

function showHelpItems() {
  const helpItems = [
    'do something crazy',
    'today release the hamsters into the wild',
    'tomorrow bring about financial ruin upon my enemies',
    'in 5 minutes drop everything',
    'in 2 hours laugh out loud in Reminders list',
    'in 3 days 1 hour pick stuff up off the floor',
    '24/12/13 to forget everything I know about things in movies',
    '12 June 15 to come up with some interesting ideas',
    '31-12-99 23:22 panic about the millennium bug',
    'at 2pm wait for nothing in particular',
    'next thursday at 15.30 ask some difficult questions',
    '!!! in 2 weeks an important meeting',
    'thursday have a banana medium priority',
    'decide what to have for lunch !lo',
    'make a turkey sandwich p3',
    'this',
  ];
  var parsedReminder = {};
  const items = [];
  const reminders = [];

  for (let i = 0; i &lt; helpItems.length; i++) {
    var parsedReminder = parseReminderQuery(helpItems[i]);
    // console.log(helpItems[i]);
    if (parsedReminder.items) {
      item = parsedReminder.items[0];
      item.title = `r ${helpItems[i]}`;
      item.valid = false;
      items.push(item);
    }
    if (parsedReminder.reminders) {
      reminders.push(parsedReminder.reminders[0]);
    }
  }

  parsedReminder.items = items;
  parsedReminder.reminders = reminders;

  return parsedReminder;
}
</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>Adds an entry to Apple Reminders</string>
				<key>title</key>
				<string>Add Reminder</string>
				<key>type</key>
				<integer>7</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>B3DC4BDA-18AF-4BC9-B6FD-5AC43239F9A0</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<false/>
				<key>onlyshowifquerypopulated</key>
				<true/>
				<key>removeextension</key>
				<false/>
				<key>text</key>
				<string>{query}</string>
				<key>title</key>
				<string>Reminders</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>E5B72F9E-C243-4876-B6BB-4C79008E62D0</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>68</integer>
				<key>script</key>
				<string>function run(argv) {
	var query = argv[0];

	ObjC.import('stdlib');
	var reminders = JSON.parse($.getenv('reminders'));
	//console.log(reminders);


	// get the actioned item
	reminderData = reminders.find(function (r) {
		return r.arg == query;
	});
	//console.log(reminderData);

	return createReminder(reminderData, $.getenv('defaultList'));
}

function createReminder(reminderData, defaultList) {
	var Reminders = Application('Reminders');
	try {
		data = {name:reminderData['text']}
		console.log("Name:" + data['name'])
		if(reminderData['body']) {
			data['body'] = reminderData['body'];
		}
		if(reminderData['date']) {
			data['remindMeDate'] = new Date(reminderData['date'])
			console.log("Date:" + data['date']);
		}
		if(reminderData['priority']) {
			data['priority'] = parseInt(reminderData['priority']);
		}
		if(reminderData['list'] &amp;&amp; Reminders.lists.whose({name:reminderData['list']}).length) {
			// list provided by query
			reminderList = Reminders.lists.whose({name:reminderData['list']})[0];
		} else if(defaultList &amp;&amp; Reminders.lists.whose({name:defaultList}).length) {
			// list provided by worklow variable
			reminderList = Reminders.lists.whose({name:defaultList})[0];
		} else {
			// default list provided by application
			reminderList = Reminders.defaultList;
		}
		//console.log(reminder);
		reminder = Reminders.Reminder(data);
		reminderList.reminders.push(reminder);
		// nb. querying the reminder object at this point causes reminders app to hang for ~15 sec
		return "Created reminder: " + data['name'];
	} catch (e) {
		console.log(e);
		return e;
	}
}</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>7</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>140C34D0-49CC-4CE2-BA3E-02B3B115F9D8</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>json</key>
				<string>{
  "alfredworkflow" : {
    "arg" : "{query}",
    "config" : {
    },
    "variables" : {
      "hello": 1,
      "supportedApplications" : [
        [
          {
            "reminderText" : "Application('Contacts').selection()[0].name()",
            "icon" : "Address Book.png",
            "appname" : "Address Book",
            "reminderBody" : "'addressbook:\/\/' + Application('Contacts').selection()[0].id()"
          },
          {
            "reminderText" : "Application('Microsoft Edge').windows[0].activeTab.title();",
            "icon" : "Edge",
            "appname" : "Microsoft Edge",
            "reminderBody" : "Application('Microsoft Edge').windows[0].activeTab.url();"
          },
          {
            "reminderText" : "Application('Brave Browser').windows[0].activeTab.title();",
            "icon" : "Brave.png",
            "appname" : "Brave Browser",
            "reminderBody" : "Application('Brave Browser').windows[0].activeTab.url();"
          },
          {
            "reminderText" : "Application('Microsoft Excel').activeDocument.name()",
            "icon" : "Excel.png",
            "appname" : "Microsoft Excel",
            "reminderBody" : "var p = Application('Microsoft Excel').activeDocument.posixFullName(); if(p) 'file:\/\/' + escape(p)"
          },
          {
            "reminderText" : "Application('Adobe Acrobat').activeDoc.name()",
            "icon" : "AcrobatPro.png",
            "appname" : "AdobeAcrobat",
            "reminderBody" : "var p = Application('Adobe Acrobat').activeDoc.fileAlias().toString(); if(p) 'file:\/\/' + escape(p)"
          },
          {
            "reminderText" : "Application('Chromium').windows[0].activeTab.title();",
            "icon" : "Chromium.png",
            "appname" : "Chromium",
            "reminderBody" : "Application('Chromium').windows[0].activeTab.url();"
          },
          {
            "reminderText" : "Application('Contacts').selection()[0].name()",
            "icon" : "Address Book.png",
            "appname" : "Contacts",
            "reminderBody" : "'addressbook:\/\/' + Application('Contacts').selection()[0].id()"
          },
          {
            "reminderText" : "Application('Finder').selection()[0].name()",
            "icon" : "Finder.png",
            "appname" : "Finder",
            "reminderBody" : "Application('Finder').selection()[0].url()"
          },
          {
            "reminderText" : "Application('FoldingText').documents[0].name()",
            "icon" : "App.png",
            "appname" : "FoldingText",
            "reminderBody" : "var p = Application('FoldingText').documents[0].path(); if(p) 'file:\/\/' + escape(p)"
          },
          {
            "reminderText" : "Application('Google Chrome').windows[0].activeTab.title();",
            "icon" : "Chrome.png",
            "appname" : "Google Chrome",
            "reminderBody" : "Application('Google Chrome').windows[0].activeTab.url();"
          },
          {
            "reminderText" : "Application('Google Chrome Canary').windows[0].activeTab.title();",
            "icon" : "Chrome Canary.png",
            "appname" : "Google Chrome Canary",
            "reminderBody" : "Application('Google Chrome Canary').windows[0].activeTab.url();"
          },
          {
            "reminderText" : "Application('Mailplane 3').currenttitle()",
            "icon" : "Mailplane 3.png",
            "appname" : "Mailplane 3",
            "reminderBody" : "Application('MailPlane 3').currentmessagetext()"
          },
          {
            "reminderText" : "var m = Application('Mail').selection()[Application('Mail').selection().length-1]; m.subject() + ' (From ' + m.sender() + ')'",
            "icon" : "Mail.png",
            "appname" : "Mail",
            "reminderBody" : "var m = Application('Mail').selection()[Application('Mail').selection().length-1]; 'message:\/\/&lt;' + m.messageId() + '&gt;'"
          },
          {
            "reminderText" : "Application('Microsoft PowerPoint').activePresentation.name()",
            "icon" : "Powerpoint.png",
            "appname" : "Microsoft PowerPoint",
            "reminderBody" : "var p = Application('Microsoft PowerPoint').activePresentation.fullName(); if(p) 'file:\/\/' + escape(p)"
          },
          {
            "reminderText" : "Application('Microsoft Word').activeDocument.name()",
            "icon" : "MSWord.png",
            "appname" : "Microsoft Word",
            "reminderBody" : "var p = Application('Microsoft Word').activeDocument.posixFullName(); if(p) 'file:\/\/' + escape(p)"
          },
          {
            "reminderText" : "Application('Safari').windows[0].currentTab.name();",
            "icon" : "Safari.png",
            "appname" : "Safari",
            "reminderBody" : "Application('Safari').windows[0].currentTab.url();"
          },
          {
            "reminderText" : "Application('TextEdit').documents[0].name()",
            "icon" : "TextEdit.png",
            "appname" : "TextEdit",
            "reminderBody" : "var p = Application('TextEdit').documents[0].path(); if(p) 'file:\/\/' + escape(p)"
          },
          {
            "reminderText" : "Application('TextMate').documents[0].name()",
            "icon" : "TextMate.png",
            "appname" : "TextMate",
            "reminderBody" : "var p = Application('TextMate').documents[0].path(); if(p) 'file:\/\/' + escape(p)"
          },
          {
            "reminderText" : "Application('Vienna').currentArticle().title()",
            "icon" : "RSS.png",
            "appname" : "Vienna",
            "reminderBody" : "Application('Vienna').currentArticle().link()"
          },
          {
            "reminderText" : "Application('WebKit').windows[0].currentTab.name();",
            "icon" : "Safari.png",
            "appname" : "WebKit",
            "reminderBody" : "Application('WebKit').windows[0].currentTab.url();"
          }
        ]
      ]
    }
  }
}</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.json</string>
			<key>uid</key>
			<string>4F5104FF-C724-4808-A868-A22160D0D9E7</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>0</integer>
				<key>script</key>
				<string>readonly remote_info_plist='https://github.com/surrealroad/alfred-reminders/raw/master/source/info.plist' # URL of remote info.plist
readonly workflow_url='https://github.com/surrealroad/alfred-reminders/raw/master/Reminders.alfredworkflow' # URL to directly download workflow or workflow download page
readonly workflow_type='workflow' # Either 'workflow' if workflow_url points to direct download, or 'page' if it points to download page
readonly frequency_check='15' # Days between update checks

# FROM HERE ON, CODE SHOULD BE LEFT UNTOUCHED UNLESS YOU KNOW WHAT YOU ARE DOING
function abort {
  echo "${1}" &gt;&amp;2
  exit 1
}

function url_exists {
  curl --silent --location --output /dev/null --fail --range 0-0 "${1}"
}

function notification {
  local readonly terminal_notifier="$(find . -name terminal-notifier.app)"

  if [[ -n "${terminal_notifier}" ]]; then
    "${terminal_notifier}"/Contents/MacOS/terminal-notifier -title "${alfred_workflow_name}" -subtitle 'A new version is available' -message "${1}"
  else
    osascript -e "display notification \"${1}\" with title \"${alfred_workflow_name}\" subtitle \"A new version is available\""
  fi
}

# Local sanity checks
readonly local_info_plist='info.plist'
readonly local_version="$(/usr/libexec/PlistBuddy -c 'print version' "${local_info_plist}")"

[[ -n "${local_version}" ]] || abort 'You need to set a workflow version in the configuration sheet.'
[[ "${workflow_type}" =~ ^(workflow|page)$ ]] || abort "'workflow_type' (${workflow_type}) needs to be one of 'workflow' or 'page'."
[[ "${frequency_check}" =~ ^[0-9]+$ ]] || abort "'frequency_check' (${frequency_check}) needs to be a number."

# Check for updates
if [[ $(find "${local_info_plist}" -mtime +"${frequency_check}"d) ]]; then
  if ! url_exists "${remote_info_plist}"; then abort "'remote_info_plist' (${remote_info_plist}) appears to not be reachable."; fi # Remote sanity check

  readonly tmp_file="$(mktemp)"
  curl --silent --location --output "${tmp_file}" "${remote_info_plist}"
  readonly remote_version="$(/usr/libexec/PlistBuddy -c 'print version' "${tmp_file}")"

  if [[ "${local_version}" != "${remote_version}" ]]; then
    if [[ "${workflow_type}" == 'page' ]]; then
      notification 'Opening download page…'
      open "${workflow_url}"
    else
      if url_exists "${workflow_url}"; then
        notification 'Downloading and installing…'
        curl --silent --location --output "${HOME}/Downloads/${alfred_workflow_name}.alfredworkflow" "${workflow_url}"
        open "${HOME}/Downloads/${alfred_workflow_name}.alfredworkflow"
      else
        abort "'workflow_url' (${workflow_url}) appears to not be reachable."
      fi # url_exists
    fi # workflow_type
  else
    touch "${local_info_plist}" # Reset timer by touching local file
  fi # diff
fi #find</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>DF47C07B-3990-4258-9ADD-9750C97514B2</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argument</key>
				<string>Output from Script: '{query}'
Variables: {allvars}</string>
				<key>cleardebuggertext</key>
				<false/>
				<key>processoutputs</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.debug</string>
			<key>uid</key>
			<string>8AD0B8E1-2FF7-48C0-AF64-5BF7C0D23024</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argument</key>
				<string>Output from Script: '{query}'
Variables: {allvars}</string>
				<key>cleardebuggertext</key>
				<false/>
				<key>processoutputs</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.debug</string>
			<key>uid</key>
			<string>7C61BE1C-BE82-42B1-A275-DDECED8286B9</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>action</key>
				<integer>0</integer>
				<key>argument</key>
				<integer>0</integer>
				<key>focusedappvariable</key>
				<false/>
				<key>focusedappvariablename</key>
				<string></string>
				<key>hotkey</key>
				<integer>15</integer>
				<key>hotmod</key>
				<integer>524288</integer>
				<key>hotstring</key>
				<string>R</string>
				<key>leftcursor</key>
				<false/>
				<key>modsmode</key>
				<integer>0</integer>
				<key>relatedAppsMode</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.trigger.hotkey</string>
			<key>uid</key>
			<string>753A2FE9-54A7-4669-A152-62DD67EDCC50</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
	</array>
	<key>readme</key>
	<string>alfred-reminders
================

This creates a new reminder in Apple Reminders

[Download the latest version](https://github.com/surrealroad/alfred-reminders/releases/latest), for Alfred v3 and macOS

More information at [Alfred Forums](http://www.alfredforum.com/topic/917-reminders/)

## Usage
To use, just type `r &lt;some text&gt;` into Alfred.

For example, `r check out some of Alfred's other workflows` will create a new reminder called "check out some of Alfred's other workflows". 

You can also include times and dates in the text and have Alfred set a reminder for that particular time.

`r this` will capture the current application and turn it into a reminder.

`r help` will show some built-in examples.

### Dates
To be reminded at a specific date/time, simply type a date into the command, for example:

- `r today release the hamsters into the wild`
- `r tomorrow bring about financial ruin upon my enemies`
- `r in 5 minutes drop everything`
- `r in 2 hours laugh out loud`
- `r on 24/12/13 forget everything I know about things in movies`
- `r on 12 June 15 come up with some interesting ideas`
- `r on 31-12-99 23:22 panic about the millennium bug`
- `r at 2pm wait for nothing in particular`
- `r next thursday at 15.30 ask some difficult questions`

### Priority - Fixed

To set the priority of the reminder, either use exclamation marks right at the start or end of the command (`!` for low priority, `!!` for medium priority, `!!!` for high priority), or type the priority right at the end of the command (these can also be abbreviated, for example `mp` or `p lo`). For example:

- `r !!! in 2 weeks an important meeting`
- `r thursday have a banana medium priority`
- `r decide what to have for lunch !lo`
- `r make a turkey sandwich p3`

### Lists

To choose a list to use on a per-reminder basis, type `in &lt;list name&gt; list` right at the end of the command, for example `r Get Santa outfit !2 in Christmas list`. For single-word lists you can now use the shortcut `@ &lt;list name&gt;`. If a matching list can't be found, you won't be able to action the command.

In all other cases, the default Reminders list will be used (typically the first one). If you prefer, you can edit the `defaultList` variable within the workflow's Arg and Vars node (note that you'll have to edit this each time you upgrade the workflow however).

### Apps
Get reminded about the app you're using, for example the selected file in Finder, or the current tab in Chrome or Safari.

To create a reminder about the active app, simply type `r this`. Or keep typing to set a date, priority or a custom title, for example `r this drop some sick beats on Friday !!!`.

The following apps are currently supported:

- AdobeAcrobat
- Chromium
- Contacts
- Finder
- FoldingText
- Brave Browser
- Microsoft Edge
- Google Chrome
- Google Chrome Canary
- Mailplane
- Mail
- Microsoft PowerPoint
- Microsoft Word
- Microsoft Excel
- Safari
- TextEdit
- TextMate
- Vienna
- WebKit

Apps can be added on request. Just [raise an issue](https://github.com/surrealroad/alfred-reminders/issues/new) with the app you use. As long as it's freely available and has AppleScript support, it can be added.

### Getting help

`r help` will display the above examples

All sorts of combinations are possible!

### Configuration
If you want to change the default reminder list, edit the variables component at the top of the workflow, otherwise it will just use the first one (unless you use "in Y list" at the end).

To reverse the priority so `p1` is the highest and `p3` is the lowest priority, change the `reverse_priority` under the **Workflow Environment Variables**.

### External trigger
To call the workflow as an external trigger, use applescript such as
```
tell application "Alfred 4" to run trigger "remind" in workflow "com.surrealroad.alfred-reminder" with argument "something tomorrow at 5pm"
```

### Building from source
In Alfred create a new Blank Workflow, then right-click and choose Open In Finder. Then replace all the files with this source.

## Acknowledgements
Date parsing is done via [chrono.js](https://github.com/wanasit/chrono)

Uses icons from the Flurry collection by David Lanham / The Icon Factory

Updates via [OneUpdater](https://github.com/vitorgalvao/alfred-workflows/tree/master/OneUpdater)</string>
	<key>uidata</key>
	<dict>
		<key>140C34D0-49CC-4CE2-BA3E-02B3B115F9D8</key>
		<dict>
			<key>colorindex</key>
			<integer>7</integer>
			<key>note</key>
			<string>This actions the selected item, creating a new reminder.</string>
			<key>xpos</key>
			<real>530</real>
			<key>ypos</key>
			<real>230</real>
		</dict>
		<key>4F5104FF-C724-4808-A868-A22160D0D9E7</key>
		<dict>
			<key>colorindex</key>
			<integer>3</integer>
			<key>note</key>
			<string>TODO
Understand why this doesn't get passed along</string>
			<key>xpos</key>
			<real>65</real>
			<key>ypos</key>
			<real>295</real>
		</dict>
		<key>753A2FE9-54A7-4669-A152-62DD67EDCC50</key>
		<dict>
			<key>xpos</key>
			<real>35</real>
			<key>ypos</key>
			<real>435</real>
		</dict>
		<key>7C61BE1C-BE82-42B1-A275-DDECED8286B9</key>
		<dict>
			<key>colorindex</key>
			<integer>1</integer>
			<key>note</key>
			<string>Show debugger to see output from Run Script</string>
			<key>xpos</key>
			<real>740</real>
			<key>ypos</key>
			<real>410</real>
		</dict>
		<key>8AD0B8E1-2FF7-48C0-AF64-5BF7C0D23024</key>
		<dict>
			<key>colorindex</key>
			<integer>1</integer>
			<key>note</key>
			<string>Show debugger to see output from Script Filter</string>
			<key>xpos</key>
			<real>540</real>
			<key>ypos</key>
			<real>410</real>
		</dict>
		<key>9B74DEE8-5782-4018-AEED-4292720A1DD2</key>
		<dict>
			<key>note</key>
			<string>Double-click this to edit default settings.</string>
			<key>xpos</key>
			<real>430</real>
			<key>ypos</key>
			<real>150</real>
		</dict>
		<key>9C5CBE5A-08CB-4CEB-BCAE-4C1004408F30</key>
		<dict>
			<key>colorindex</key>
			<integer>7</integer>
			<key>note</key>
			<string>Decides whether to quit Reminders at the end</string>
			<key>xpos</key>
			<real>740</real>
			<key>ypos</key>
			<real>110</real>
		</dict>
		<key>9E75FCF7-24AE-46AC-869F-BA9DC4B00A00</key>
		<dict>
			<key>colorindex</key>
			<integer>7</integer>
			<key>note</key>
			<string>This action causes Reminders to quit</string>
			<key>xpos</key>
			<real>840</real>
			<key>ypos</key>
			<real>80</real>
		</dict>
		<key>A7051A8F-F219-487F-93B5-7FB38425A3F8</key>
		<dict>
			<key>colorindex</key>
			<integer>10</integer>
			<key>note</key>
			<string>use this trigger to manually provide a query
*only the first result is used*</string>
			<key>xpos</key>
			<real>30</real>
			<key>ypos</key>
			<real>80</real>
		</dict>
		<key>B3DC4BDA-18AF-4BC9-B6FD-5AC43239F9A0</key>
		<dict>
			<key>colorindex</key>
			<integer>8</integer>
			<key>note</key>
			<string>This handles the parsing of the query into actionable items.</string>
			<key>xpos</key>
			<real>220</real>
			<key>ypos</key>
			<real>230</real>
		</dict>
		<key>DF47C07B-3990-4258-9ADD-9750C97514B2</key>
		<dict>
			<key>colorindex</key>
			<integer>12</integer>
			<key>note</key>
			<string>OneUpdater
Provides automatic updating</string>
			<key>xpos</key>
			<real>840</real>
			<key>ypos</key>
			<real>350</real>
		</dict>
		<key>E5B72F9E-C243-4876-B6BB-4C79008E62D0</key>
		<dict>
			<key>colorindex</key>
			<integer>6</integer>
			<key>xpos</key>
			<real>840</real>
			<key>ypos</key>
			<real>230</real>
		</dict>
		<key>EDFDD779-8983-498D-A72A-AF66A1753F7C</key>
		<dict>
			<key>colorindex</key>
			<integer>10</integer>
			<key>note</key>
			<string>TODO
Reduce code duplication</string>
			<key>xpos</key>
			<real>220</real>
			<key>ypos</key>
			<real>80</real>
		</dict>
	</dict>
	<key>userconfigurationconfig</key>
	<array/>
	<key>variables</key>
	<dict>
		<key>reverse_priority</key>
		<string>1</string>
	</dict>
	<key>variablesdontexport</key>
	<array/>
	<key>version</key>
	<string>75</string>
	<key>webaddress</key>
	<string>http://www.surrealroad.com</string>
</dict>
</plist>
